import type {
  Failure,
  Invocation,
  ServiceMethod,
  UCANLink,
  DID,
} from '@ucanto/interface'
import type { API } from '@ucanto/server'

import {
  StoreAdd,
  StoreRemove,
  StoreList,
  UploadAdd,
  UploadRemove,
  UploadList
} from '@web3-storage/access/capabilities/types'

/** CID v0 or CID v1 */
export interface AnyLink extends API.Link<unknown, number, number, 0 | 1> {}

export interface Service {
  store: {
    add: ServiceMethod<StoreAdd, StoreAddResult, Failure>,
    remove: ServiceMethod<StoreRemove, void, Failure>,
    list: ServiceMethod<StoreList, ListResponse<StoreListResult>, Failure>,
  },
  upload: {
    add: ServiceMethod<UploadAdd, UploadAddResult, Failure>,
    remove: ServiceMethod<UploadRemove, void, Failure>,
    list: ServiceMethod<UploadList, ListResponse<UploadItemOutput>, Failure>,
  }
}

export interface StoreServiceContext {
  storeTable: StoreTable,
  carStoreBucket: CarStoreBucket,
  signer: Signer
  access: AccessClient
}

export interface UploadServiceContext {
  uploadTable: UploadTable,
  dataCidCarCidMapBucket: DataCidCarCidMapBucket
}

export interface UcantoServerContext extends StoreServiceContext, UploadServiceContext {}

export interface CarStoreBucket {
  has: (key: string) => Promise<boolean>
}

export interface DataCidCarCidMapBucket {
  put: (dataCid: string, carCid: string) => Promise<void>
}

export interface StoreTable {
  exists: (space: DID, link: AnyLink) => Promise<boolean>
  insert: (item: StoreItemInput) => Promise<StoreItemOutput>
  remove: (space: DID, link: AnyLink) => Promise<void>
  list: (space: DID, options?: ListOptions) => Promise<ListResponse<StoreListResult>>
}

export interface UploadTable {
  exists: (space: DID, root: AnyLink) => Promise<boolean>
  insert: (item: UploadItemInput) => Promise<UploadItemOutput[]>
  remove: (space: DID, root: AnyLink) => Promise<void>
  list: (space: DID, options?: ListOptions) => Promise<ListResponse<UploadItemOutput>>
}

export interface Signer {
  sign: (link: AnyLink) => { url: URL, headers: Record<string, string>}
}

export interface StoreItemInput {
  space: DID
  link: AnyLink
  size: number
  origin?: AnyLink
  issuer: DID
  invocation: UCANLink
}

/** Formatted for inserting to the db */ 
export interface StoreItemOutput {
  space: string
  link: string
  size: number
  origin?: string
  issuer: string
  invocation: string
  insertedAt: string,
}

export interface StoreAddResult {
  status: 'upload' | 'done',
  with: API.URI<"did:">,
  link: AnyLink,
  url?: URL,
  headers?: Record<string, string>
}

export interface ListOptions {
  size?: number,
  cursor?: string
}

export interface StoreListResult {
  link: string
  size: number
  origin?: string
  insertedAt: string
}

export interface ListResponse<R> {
  cursor?: string,
  size: number,
  results: R[]
}

export interface UploadItemInput {
  space: DID
  root: AnyLink
  shards?: AnyLink[]
  issuer: DID
  invocation: UCANLink
}

/** Formatted for inserting to the db */ 
export interface UploadItemOutput {
  space: string
  root: string
  shard: string,
  issuer: string
  invocation: string
  insertedAt: string
}

export interface AccessClient {
  /**
   * Determines if the issuer of the invocation has received a delegation
   * allowing them to issue the passed invocation.
   */
  verifyInvocation: (invocation: Invocation) => Promise<boolean>
}

export interface UploadAddResult extends Array<UploadItemOutput> {}

// would be generated by sst, but requires `sst build` to be run, which calls out to aws; not great for CI
declare module "@serverless-stack/node/config" {
  export interface SecretResources {
    "PRIVATE_KEY": {
      value: string;
    }
  }
}
